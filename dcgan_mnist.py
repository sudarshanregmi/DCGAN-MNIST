# -*- coding: utf-8 -*-
"""DCGAN-MNIST.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1B5Dak-u246CTkXBYZtJp-KTkMkVOCf42
"""

#imports

from __future__ import print_function
import argparse
import os
import random
import torch
import torch.nn as nn
import torch.nn.parallel
import torch.backends.cudnn as cudnn
import torch.optim as optim
import torch.utils.data
import torchvision.datasets as dset
import torchvision.transforms as transforms
import torchvision.utils as vutils
import torchvision.datasets as dset

#Allow the optimization 
cudnn.benchmark = True

imageSize = 64  
batchSize = 64
nz = 100                # size of the latent z vector
ngf = 64                
ndf = 64                
ngpu = 1

#load MNIST dataset

dataset = dset.MNIST(root='data/mnist', download=True,
                           transform=transforms.Compose([
                               transforms.Resize(imageSize),
                               transforms.ToTensor(),
                               transforms.Normalize((0.5, ), (0.5, )),
                           ]))
nc = 1   # number of channels in MNIST dataset is 1

dataloader = torch.utils.data.DataLoader(dataset, batch_size=batchSize,
                                         shuffle=True, num_workers=2)

device = torch.device("cuda:0" if torch.cuda.is_available() else "cpu")

def initialize_weights(net):
    for m in net.modules():
        if isinstance(m, nn.Conv2d):
            m.weight.data.normal_(0, 0.02)
            if m.bias is not None:
                m.bias.data.zero_()
        elif isinstance(m, nn.ConvTranspose2d):
            m.weight.data.normal_(0, 0.02)
            if m.bias is not None:
                m.bias.data.zero_()
        elif isinstance(m, nn.BatchNorm2d):
            m.weight.data.normal_(1, 0.02)
            if m.bias is not None:
                m.bias.data.zero_()

class Generator(nn.Module):
    def __init__(self, ngpu):
        super(Generator, self).__init__()
        self.ngpu = ngpu
        self.main = nn.Sequential(
            nn.ConvTranspose2d(nz, ngf*8, 4, 1, 0, bias=False),
            nn.BatchNorm2d(ngf*8),
            nn.ReLU(True),

            nn.ConvTranspose2d(ngf*8, ngf*4, 4, 2, 1, bias=False),
            nn.BatchNorm2d(ngf*4),
            nn.ReLU(True),

            nn.ConvTranspose2d(ngf*4, ngf*2, 4, 2, 1, bias=False),
            nn.BatchNorm2d(ngf*2),
            nn.ReLU(True),

            nn.ConvTranspose2d(ngf*2, ngf, 4, 2, 1, bias=False),
            nn.BatchNorm2d(ngf),
            nn.ReLU(True),

            nn.ConvTranspose2d(ngf, nc, 4, 2, 1, bias=False),
            nn.Tanh()
        )
        initialize_weights(self)

    def forward(self, input):
        if input.is_cuda and self.ngpu > 1:
            output = nn.parallel.data_parallel(self.main, input, range(self.gpu))
        else:
            output = self.main(input)

        return output

class Discriminator(nn.Module):
    def __init__(self, ngpu):
        super(Discriminator, self).__init__()
        self.ngpu = ngpu
        self.main = nn.Sequential(
            nn.Conv2d(nc, ndf, 4, 2, 1, bias=False),
            nn.LeakyReLU(0.2, inplace=True),
            nn.Conv2d(ndf, ndf * 2, 4, 2, 1, bias=False),
            nn.BatchNorm2d(ndf * 2),
            nn.LeakyReLU(0.2, inplace=True),
            nn.Conv2d(ndf * 2, ndf * 4, 4, 2, 1, bias=False),
            nn.BatchNorm2d(ndf * 4),
            nn.LeakyReLU(0.2, inplace=True),
            nn.Conv2d(ndf * 4, ndf * 8, 4, 2, 1, bias=False),
            nn.BatchNorm2d(ndf * 8),
            nn.LeakyReLU(0.2, inplace=True),
            nn.Conv2d(ndf * 8, 1, 4, 1, 0, bias=False),
            nn.Sigmoid()
        )

    def forward(self, input):
        if input.is_cuda and self.ngpu > 1:
            output = nn.parallel.data_parallel(self.main, input, range(self.ngpu))
        else:
            output = self.main(input)

        return output.view(-1, 1).squeeze(1)

netG = Generator(ngpu).to(device)
netD = Discriminator(ngpu).to(device)

print(netG)
print(netD)

criterion = nn.BCELoss()

fixed_noise = torch.randn(batchSize, nz, 1, 1, device=device)
fake_label = 0
real_label = 1

optimizerD = optim.Adam(netD.parameters(), lr=0.0002, betas=(0.5, 0.999))
optimizerG= optim.Adam(netG.parameters(), lr=0.0002, betas=(0.5, 0.999))

for epoch in range(20):
    for i, data in enumerate(dataloader, 0):

        netD.zero_grad()
        trainData = data[0].to(device)
        batch_size = trainData.size(0)
        label = torch.full((batch_size,), real_label, device=device)

        output = netD(trainData)
        D_err_real = criterion(output, label)
        D_err_real.backward()
        D_x = output.mean().item()


        #train with fake data
        noise = torch.randn(batch_size, nz, 1, 1, device=device)
        fake = netG(noise)
        label.fill_(fake_label)
        output = netD(fake.detach())
        D_err_fake = criterion(output, label)
        D_err_fake.backward()
        D_G_z1 = output.mean().item()
        D_err = D_err_real + D_err_fake
        optimizerD.step()

        netG.zero_grad()
        label.fill_(real_label)
        output = netD(fake)
        G_err = criterion(output, label)
        G_err.backward()
        D_G_z2 = output.mean().item()
        optimizerG.step()

        print('Epoch: ', epoch, ' Iteration: ', i, 'Generator loss: ', G_err.item(),
              ' Discriminator loss ', D_err.item()  )
        if i % 100 == 0:
            vutils.save_image(trainData, 'trainImage.png', normalize=True)
            fake = netG(fixed_noise)
            vutils.save_image(fake.detach(), 'fakeImage.png', normalize=True)

    torch.save(netG.state_dict(), 'netG_torch_%d.pth' % epoch)
    torch.save(netD.state_dict(), 'netD_torch_%d.pth' % epoch)
